TurtleParser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "turtleDoc": parse_turtleDoc,
        "statement": parse_statement,
        "directive": parse_directive,
        "sparqlPrefix": parse_sparqlPrefix,
        "sparqlBase": parse_sparqlBase,
        "triples": parse_triples,
        "predicateObjectList": parse_predicateObjectList,
        "objectList": parse_objectList,
        "verb": parse_verb,
        "subject": parse_subject,
        "object": parse_object,
        "literal": parse_literal,
        "blankNodePropertyList": parse_blankNodePropertyList,
        "lbracket": parse_lbracket,
        "NumericLiteral": parse_NumericLiteral,
        "RDFLiteral": parse_RDFLiteral,
        "BooleanLiteral": parse_BooleanLiteral,
        "String": parse_String,
        "iri": parse_iri,
        "PrefixedName": parse_PrefixedName,
        "BlankNode": parse_BlankNode,
        "RDF_TYPE": parse_RDF_TYPE,
        "IRIREF": parse_IRIREF,
        "SPARQL_PREFIX": parse_SPARQL_PREFIX,
        "SPARQL_BASE": parse_SPARQL_BASE,
        "PNAME_NS": parse_PNAME_NS,
        "PNAME_LN": parse_PNAME_LN,
        "BLANK_NODE_LABEL": parse_BLANK_NODE_LABEL,
        "LANGTAG": parse_LANGTAG,
        "INTEGER": parse_INTEGER,
        "STRING_LITERAL1": parse_STRING_LITERAL1,
        "STRING_LITERAL2": parse_STRING_LITERAL2,
        "ANON": parse_ANON,
        "_": parse__,
        "WS": parse_WS,
        "COMMENT": parse_COMMENT
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "turtleDoc";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_turtleDoc() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_statement();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_statement();
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
          if (curSubject.length > 0 ||
              curPredicate.length > 0) {
              return {_: "Bad end state:",
                  s:curSubject, 
                  p:curPredicate, 
                  t:db.triples.map(
                      function (t) { return t.toString(); }
                  ).join('\n')
              };
          }
          return db;
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_directive();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_triples();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 46) {
                result2 = ".";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_directive() {
        var result0;
        
        result0 = parse_sparqlPrefix();
        if (result0 === null) {
          result0 = parse_sparqlBase();
        }
        return result0;
      }
      
      function parse_sparqlPrefix() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_SPARQL_PREFIX();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_PNAME_NS();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_IRIREF();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, i) { RDF.addPrefix(pre, i.lex); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_sparqlBase() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_SPARQL_BASE();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_IRIREF();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, i) { RDF.setBase(i.lex); })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_triples() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_subject();
          if (result1 !== null) {
            result2 = parse_predicateObjectList();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { curSubject.pop(); })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse__();
          if (result0 !== null) {
            result1 = parse_blankNodePropertyList();
            if (result1 !== null) {
              result2 = parse_predicateObjectList();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { curSubject.pop(); })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_predicateObjectList() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_verb();
          if (result1 !== null) {
            result2 = parse_objectList();
            if (result2 !== null) {
              result3 = [];
              pos1 = clone(pos);
              result4 = parse__();
              if (result4 !== null) {
                if (input.charCodeAt(pos.offset) === 59) {
                  result5 = ";";
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\";\"");
                  }
                }
                if (result5 !== null) {
                  result6 = parse__();
                  if (result6 !== null) {
                    result7 = [];
                    pos2 = clone(pos);
                    result8 = parse_verb();
                    if (result8 !== null) {
                      result9 = parse_objectList();
                      if (result9 !== null) {
                        result8 = [result8, result9];
                      } else {
                        result8 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result8 = null;
                      pos = clone(pos2);
                    }
                    while (result8 !== null) {
                      result7.push(result8);
                      pos2 = clone(pos);
                      result8 = parse_verb();
                      if (result8 !== null) {
                        result9 = parse_objectList();
                        if (result9 !== null) {
                          result8 = [result8, result9];
                        } else {
                          result8 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result8 = null;
                        pos = clone(pos2);
                      }
                    }
                    if (result7 !== null) {
                      result4 = [result4, result5, result6, result7];
                    } else {
                      result4 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos1);
                }
              } else {
                result4 = null;
                pos = clone(pos1);
              }
              while (result4 !== null) {
                result3.push(result4);
                pos1 = clone(pos);
                result4 = parse__();
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 59) {
                    result5 = ";";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse__();
                    if (result6 !== null) {
                      result7 = [];
                      pos2 = clone(pos);
                      result8 = parse_verb();
                      if (result8 !== null) {
                        result9 = parse_objectList();
                        if (result9 !== null) {
                          result8 = [result8, result9];
                        } else {
                          result8 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result8 = null;
                        pos = clone(pos2);
                      }
                      while (result8 !== null) {
                        result7.push(result8);
                        pos2 = clone(pos);
                        result8 = parse_verb();
                        if (result8 !== null) {
                          result9 = parse_objectList();
                          if (result9 !== null) {
                            result8 = [result8, result9];
                          } else {
                            result8 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result8 = null;
                          pos = clone(pos2);
                        }
                      }
                      if (result7 !== null) {
                        result4 = [result4, result5, result6, result7];
                      } else {
                        result4 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result4 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos1);
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_objectList() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_object();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse__();
            if (result3 !== null) {
              if (input.charCodeAt(pos.offset) === 44) {
                result4 = ",";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_object();
                  if (result6 !== null) {
                    result3 = [result3, result4, result5, result6];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result4 = ",";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_object();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, o, oz) { curPredicate.pop(); })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_verb() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_iri();
        if (result0 !== null) {
          result0 = (function(offset, line, column, v) { curPredicate.push(v); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_RDF_TYPE();
          if (result0 !== null) {
            result0 = (function(offset, line, column, v) { curPredicate.push(v); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_subject() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_iri();
        if (result0 !== null) {
          result0 = (function(offset, line, column, i) { curSubject.push(i); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_BlankNode();
          if (result0 !== null) {
            result0 = (function(offset, line, column, b) { curSubject.push(b); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_object() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_iri();
        if (result0 !== null) {
          result0 = (function(offset, line, column, i) { db.push(new RDF.Triple(curSubject.slice(-1)[0], curPredicate.slice(-1)[0], i)); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_BlankNode();
          if (result0 !== null) {
            result0 = (function(offset, line, column, b) { db.push(new RDF.Triple(curSubject.slice(-1)[0], curPredicate.slice(-1)[0], b)); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_blankNodePropertyList();
            if (result0 !== null) {
              result0 = (function(offset, line, column, b) { db.push(new RDF.Triple(curSubject.slice(-1)[0], curPredicate.slice(-1)[0], b)); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_literal();
              if (result0 !== null) {
                result0 = (function(offset, line, column, l) { db.push(new RDF.Triple(curSubject.slice(-1)[0], curPredicate.slice(-1)[0], l)); })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_literal() {
        var result0;
        
        result0 = parse_RDFLiteral();
        if (result0 === null) {
          result0 = parse_NumericLiteral();
          if (result0 === null) {
            result0 = parse_BooleanLiteral();
          }
        }
        return result0;
      }
      
      function parse_blankNodePropertyList() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_lbracket();
        if (result0 !== null) {
          result1 = parse_predicateObjectList();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 93) {
                result3 = "]";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { curSubject.pop(); return s; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_lbracket() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { var ret = RDF.nextBNode(line, column, offset, 1); curSubject.push(ret);  return ret; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NumericLiteral() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_INTEGER();
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) { return new RDF.RDFLiteral(line, column, value.value, value.length, ''+value.value, undefined, new RDF.IRI(line, column, value.value, value.length, 'http://www.w3.org/2001/XMLSchema#integer')); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_RDFLiteral() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_String();
        if (result0 !== null) {
          result1 = parse_LANGTAG();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, l) { return new RDF.RDFLiteral(s.line, s.column, s.offset, s.lex.length+1+l.length, s.lex, l, undefined); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_String();
          if (result0 !== null) {
            if (input.substr(pos.offset, 2) === "^^") {
              result1 = "^^";
              advance(pos, 2);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"^^\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_iri();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s, i) { return new RDF.RDFLiteral(s.line, s.column, s.offset, s.lex.length+2+i.width, s.lex, undefined, i); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_String();
            if (result0 !== null) {
              result0 = (function(offset, line, column, s) { return new RDF.RDFLiteral(s.line, s.column, s.offset, s.lex.length, s.lex, undefined, undefined); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_BooleanLiteral() {
        var result0;
        
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        return result0;
      }
      
      function parse_String() {
        var result0;
        
        result0 = parse_STRING_LITERAL1();
        if (result0 === null) {
          result0 = parse_STRING_LITERAL2();
        }
        return result0;
      }
      
      function parse_iri() {
        var result0;
        
        result0 = parse_IRIREF();
        if (result0 === null) {
          result0 = parse_PrefixedName();
        }
        return result0;
      }
      
      function parse_PrefixedName() {
        var result0;
        var pos0;
        
        result0 = parse_PNAME_LN();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_PNAME_NS();
          if (result0 !== null) {
            result0 = (function(offset, line, column, p) { new RDF.IRI(line, column, offset, p.length+1, RDF.getAbsoluteIRI(RDF.getPrefix(p))); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_BlankNode() {
        var result0;
        
        result0 = parse_BLANK_NODE_LABEL();
        if (result0 === null) {
          result0 = parse_ANON();
        }
        return result0;
      }
      
      function parse_RDF_TYPE() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 97) {
          result0 = "a";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"a\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return new RDF.IRI(line, column, offset, 1, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'); })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IRIREF() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\0- <>"{}|^`\\]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\0- <>\"{}|^`\\\\]");
            }
          }
          if (result2 === null) {
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "\\u") {
              result2 = "\\u";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\u\"");
              }
            }
            if (result2 !== null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 === null) {
                if (/^[A-F]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[A-F]");
                  }
                }
                if (result3 === null) {
                  if (/^[a-f]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[a-f]");
                    }
                  }
                }
              }
              if (result3 !== null) {
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
                if (result4 === null) {
                  if (/^[A-F]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[A-F]");
                    }
                  }
                  if (result4 === null) {
                    if (/^[a-f]/.test(input.charAt(pos.offset))) {
                      result4 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("[a-f]");
                      }
                    }
                  }
                }
                if (result4 !== null) {
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result5 === null) {
                    if (/^[A-F]/.test(input.charAt(pos.offset))) {
                      result5 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("[A-F]");
                      }
                    }
                    if (result5 === null) {
                      if (/^[a-f]/.test(input.charAt(pos.offset))) {
                        result5 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("[a-f]");
                        }
                      }
                    }
                  }
                  if (result5 !== null) {
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                      result6 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[0-9]");
                      }
                    }
                    if (result6 === null) {
                      if (/^[A-F]/.test(input.charAt(pos.offset))) {
                        result6 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[A-F]");
                        }
                      }
                      if (result6 === null) {
                        if (/^[a-f]/.test(input.charAt(pos.offset))) {
                          result6 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[a-f]");
                          }
                        }
                      }
                    }
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 === null) {
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === "\\U") {
                result2 = "\\U";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\U\"");
                }
              }
              if (result2 !== null) {
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
                if (result3 === null) {
                  if (/^[A-F]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[A-F]");
                    }
                  }
                  if (result3 === null) {
                    if (/^[a-f]/.test(input.charAt(pos.offset))) {
                      result3 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("[a-f]");
                      }
                    }
                  }
                }
                if (result3 !== null) {
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result4 === null) {
                    if (/^[A-F]/.test(input.charAt(pos.offset))) {
                      result4 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("[A-F]");
                      }
                    }
                    if (result4 === null) {
                      if (/^[a-f]/.test(input.charAt(pos.offset))) {
                        result4 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("[a-f]");
                        }
                      }
                    }
                  }
                  if (result4 !== null) {
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                      result5 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("[0-9]");
                      }
                    }
                    if (result5 === null) {
                      if (/^[A-F]/.test(input.charAt(pos.offset))) {
                        result5 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("[A-F]");
                        }
                      }
                      if (result5 === null) {
                        if (/^[a-f]/.test(input.charAt(pos.offset))) {
                          result5 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("[a-f]");
                          }
                        }
                      }
                    }
                    if (result5 !== null) {
                      if (/^[0-9]/.test(input.charAt(pos.offset))) {
                        result6 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[0-9]");
                        }
                      }
                      if (result6 === null) {
                        if (/^[A-F]/.test(input.charAt(pos.offset))) {
                          result6 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[A-F]");
                          }
                        }
                        if (result6 === null) {
                          if (/^[a-f]/.test(input.charAt(pos.offset))) {
                            result6 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[a-f]");
                            }
                          }
                        }
                      }
                      if (result6 !== null) {
                        if (/^[0-9]/.test(input.charAt(pos.offset))) {
                          result7 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("[0-9]");
                          }
                        }
                        if (result7 === null) {
                          if (/^[A-F]/.test(input.charAt(pos.offset))) {
                            result7 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[A-F]");
                            }
                          }
                          if (result7 === null) {
                            if (/^[a-f]/.test(input.charAt(pos.offset))) {
                              result7 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[a-f]");
                              }
                            }
                          }
                        }
                        if (result7 !== null) {
                          if (/^[0-9]/.test(input.charAt(pos.offset))) {
                            result8 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result8 = null;
                            if (reportFailures === 0) {
                              matchFailed("[0-9]");
                            }
                          }
                          if (result8 === null) {
                            if (/^[A-F]/.test(input.charAt(pos.offset))) {
                              result8 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("[A-F]");
                              }
                            }
                            if (result8 === null) {
                              if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                result8 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[a-f]");
                                }
                              }
                            }
                          }
                          if (result8 !== null) {
                            if (/^[0-9]/.test(input.charAt(pos.offset))) {
                              result9 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result9 = null;
                              if (reportFailures === 0) {
                                matchFailed("[0-9]");
                              }
                            }
                            if (result9 === null) {
                              if (/^[A-F]/.test(input.charAt(pos.offset))) {
                                result9 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result9 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[A-F]");
                                }
                              }
                              if (result9 === null) {
                                if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                  result9 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result9 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[a-f]");
                                  }
                                }
                              }
                            }
                            if (result9 !== null) {
                              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                result10 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result10 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[0-9]");
                                }
                              }
                              if (result10 === null) {
                                if (/^[A-F]/.test(input.charAt(pos.offset))) {
                                  result10 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[A-F]");
                                  }
                                }
                                if (result10 === null) {
                                  if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                    result10 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                  } else {
                                    result10 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[a-f]");
                                    }
                                  }
                                }
                              }
                              if (result10 !== null) {
                                result2 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                              } else {
                                result2 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result2 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result2 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\0- <>"{}|^`\\]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\0- <>\"{}|^`\\\\]");
              }
            }
            if (result2 === null) {
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === "\\u") {
                result2 = "\\u";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\u\"");
                }
              }
              if (result2 !== null) {
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
                if (result3 === null) {
                  if (/^[A-F]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[A-F]");
                    }
                  }
                  if (result3 === null) {
                    if (/^[a-f]/.test(input.charAt(pos.offset))) {
                      result3 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("[a-f]");
                      }
                    }
                  }
                }
                if (result3 !== null) {
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result4 === null) {
                    if (/^[A-F]/.test(input.charAt(pos.offset))) {
                      result4 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("[A-F]");
                      }
                    }
                    if (result4 === null) {
                      if (/^[a-f]/.test(input.charAt(pos.offset))) {
                        result4 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("[a-f]");
                        }
                      }
                    }
                  }
                  if (result4 !== null) {
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                      result5 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("[0-9]");
                      }
                    }
                    if (result5 === null) {
                      if (/^[A-F]/.test(input.charAt(pos.offset))) {
                        result5 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("[A-F]");
                        }
                      }
                      if (result5 === null) {
                        if (/^[a-f]/.test(input.charAt(pos.offset))) {
                          result5 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("[a-f]");
                          }
                        }
                      }
                    }
                    if (result5 !== null) {
                      if (/^[0-9]/.test(input.charAt(pos.offset))) {
                        result6 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[0-9]");
                        }
                      }
                      if (result6 === null) {
                        if (/^[A-F]/.test(input.charAt(pos.offset))) {
                          result6 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[A-F]");
                          }
                        }
                        if (result6 === null) {
                          if (/^[a-f]/.test(input.charAt(pos.offset))) {
                            result6 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[a-f]");
                            }
                          }
                        }
                      }
                      if (result6 !== null) {
                        result2 = [result2, result3, result4, result5, result6];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              if (result2 === null) {
                pos2 = clone(pos);
                if (input.substr(pos.offset, 2) === "\\U") {
                  result2 = "\\U";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\U\"");
                  }
                }
                if (result2 !== null) {
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result3 === null) {
                    if (/^[A-F]/.test(input.charAt(pos.offset))) {
                      result3 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("[A-F]");
                      }
                    }
                    if (result3 === null) {
                      if (/^[a-f]/.test(input.charAt(pos.offset))) {
                        result3 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("[a-f]");
                        }
                      }
                    }
                  }
                  if (result3 !== null) {
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                      result4 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("[0-9]");
                      }
                    }
                    if (result4 === null) {
                      if (/^[A-F]/.test(input.charAt(pos.offset))) {
                        result4 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("[A-F]");
                        }
                      }
                      if (result4 === null) {
                        if (/^[a-f]/.test(input.charAt(pos.offset))) {
                          result4 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("[a-f]");
                          }
                        }
                      }
                    }
                    if (result4 !== null) {
                      if (/^[0-9]/.test(input.charAt(pos.offset))) {
                        result5 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("[0-9]");
                        }
                      }
                      if (result5 === null) {
                        if (/^[A-F]/.test(input.charAt(pos.offset))) {
                          result5 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("[A-F]");
                          }
                        }
                        if (result5 === null) {
                          if (/^[a-f]/.test(input.charAt(pos.offset))) {
                            result5 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("[a-f]");
                            }
                          }
                        }
                      }
                      if (result5 !== null) {
                        if (/^[0-9]/.test(input.charAt(pos.offset))) {
                          result6 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[0-9]");
                          }
                        }
                        if (result6 === null) {
                          if (/^[A-F]/.test(input.charAt(pos.offset))) {
                            result6 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[A-F]");
                            }
                          }
                          if (result6 === null) {
                            if (/^[a-f]/.test(input.charAt(pos.offset))) {
                              result6 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result6 = null;
                              if (reportFailures === 0) {
                                matchFailed("[a-f]");
                              }
                            }
                          }
                        }
                        if (result6 !== null) {
                          if (/^[0-9]/.test(input.charAt(pos.offset))) {
                            result7 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[0-9]");
                            }
                          }
                          if (result7 === null) {
                            if (/^[A-F]/.test(input.charAt(pos.offset))) {
                              result7 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[A-F]");
                              }
                            }
                            if (result7 === null) {
                              if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                result7 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result7 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[a-f]");
                                }
                              }
                            }
                          }
                          if (result7 !== null) {
                            if (/^[0-9]/.test(input.charAt(pos.offset))) {
                              result8 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("[0-9]");
                              }
                            }
                            if (result8 === null) {
                              if (/^[A-F]/.test(input.charAt(pos.offset))) {
                                result8 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[A-F]");
                                }
                              }
                              if (result8 === null) {
                                if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                  result8 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result8 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[a-f]");
                                  }
                                }
                              }
                            }
                            if (result8 !== null) {
                              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                result9 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result9 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[0-9]");
                                }
                              }
                              if (result9 === null) {
                                if (/^[A-F]/.test(input.charAt(pos.offset))) {
                                  result9 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result9 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[A-F]");
                                  }
                                }
                                if (result9 === null) {
                                  if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                    result9 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                  } else {
                                    result9 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[a-f]");
                                    }
                                  }
                                }
                              }
                              if (result9 !== null) {
                                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                  result10 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[0-9]");
                                  }
                                }
                                if (result10 === null) {
                                  if (/^[A-F]/.test(input.charAt(pos.offset))) {
                                    result10 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                  } else {
                                    result10 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[A-F]");
                                    }
                                  }
                                  if (result10 === null) {
                                    if (/^[a-f]/.test(input.charAt(pos.offset))) {
                                      result10 = input.charAt(pos.offset);
                                      advance(pos, 1);
                                    } else {
                                      result10 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("[a-f]");
                                      }
                                    }
                                  }
                                }
                                if (result10 !== null) {
                                  result2 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                } else {
                                  result2 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result2 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result2 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result2 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) {
            return new RDF.IRI(line, column, offset, s.length+2, RDF.getAbsoluteIRI(s.map(RDF.decodeUCHAR).join('')))
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_SPARQL_PREFIX() {
        var result0, result1, result2, result3, result4, result5;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[Pp]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Pp]");
          }
        }
        if (result0 !== null) {
          if (/^[Rr]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[Rr]");
            }
          }
          if (result1 !== null) {
            if (/^[Ee]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[Ee]");
              }
            }
            if (result2 !== null) {
              if (/^[Ff]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[Ff]");
                }
              }
              if (result3 !== null) {
                if (/^[Ii]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[Ii]");
                  }
                }
                if (result4 !== null) {
                  if (/^[Xx]/.test(input.charAt(pos.offset))) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[Xx]");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_SPARQL_BASE() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[Bb]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Bb]");
          }
        }
        if (result0 !== null) {
          if (/^[Aa]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[Aa]");
            }
          }
          if (result1 !== null) {
            if (/^[Ss]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[Ss]");
              }
            }
            if (result2 !== null) {
              if (/^[Ee]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[Ee]");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PNAME_NS() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9]");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, prefix) { return prefix.join(''); })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PNAME_LN() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9]");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            if (/^[a-zA-Z0-9_]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[a-zA-Z0-9_]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-zA-Z0-9_]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, prefix, localName) {
            return new RDF.IRI(line, column, offset, prefix.length+1+localName.length,
        		       RDF.getAbsoluteIRI(RDF.getPrefix(prefix.join(''))
        					  + localName.join('')));
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_BLANK_NODE_LABEL() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "_:") {
          result0 = "_:";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"_:\"");
          }
        }
        if (result0 !== null) {
          if (/^[a-zA-Z_]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z_]");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[a-zA-Z0-9_]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[a-zA-Z0-9_]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z0-9_]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return new RDF.BNode(line, column, offset, 2+first.length+rest.length, first+rest.join('')); })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_LANGTAG() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 64) {
          result0 = "@";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            if (input.charCodeAt(pos.offset) === 45) {
              result3 = "-";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result3 !== null) {
              if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
                result5 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result5 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result5 !== null) {
                result4 = [];
                while (result5 !== null) {
                  result4.push(result5);
                  if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[a-zA-Z0-9]");
                    }
                  }
                }
              } else {
                result4 = null;
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 45) {
                result3 = "-";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result3 !== null) {
                if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
                  result5 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
                      result5 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("[a-zA-Z0-9]");
                      }
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_INTEGER() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[+\-]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, sign, s) { var value = parseInt(s.join('')); return {value: ((sign == '-') ? -value : value), length: (s.length + sign ? 1 : 0)}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_STRING_LITERAL1() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^'\\\n\r]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^'\\\n\r]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return {line:line, column:column, offset:offset, lex:s.join('')}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_STRING_LITERAL2() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^"\\\n\r]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^"\\\n\r]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return {line:line, column:column, offset:offset, lex:s.join('')}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ANON() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return RDF.nextBNode(line, column, offset, s.length+2); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_WS();
        if (result1 === null) {
          result1 = parse_COMMENT();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_WS();
          if (result1 === null) {
            result1 = parse_COMMENT();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, x) { return ''; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WS() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[ \t\r\n]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\r\n]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return ''; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_COMMENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\r\n]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\r\\n]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\r\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, comment) { return new RDF.Comment(line, column, offset, comment.length+1, comment.join('')); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
          var curSubject = new Array();
          var curPredicate = new Array();
          var db = new RDF.DB();
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();